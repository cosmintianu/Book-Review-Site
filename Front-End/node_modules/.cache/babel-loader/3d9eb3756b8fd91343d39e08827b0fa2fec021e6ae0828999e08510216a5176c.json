{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ionut\\\\Desktop\\\\React\\\\bookreview\\\\src\\\\components\\\\IndividualBookPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualBookPage = () => {\n  _s();\n  var _userData$roles$some, _userData$roles;\n  const {\n    id\n  } = useParams();\n  const [book, setBook] = useState(null);\n  const [reviews, setReviews] = useState([]);\n  const [loadingReviews, setLoadingReviews] = useState(true);\n  const [userData, setUserData] = useState(null);\n  const navigate = useNavigate();\n  const [userDataReady, setUserDataReady] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [selectedReviewId, setSelectedReviewId] = useState(null);\n  const [newComment, setNewComment] = useState({\n    text: ''\n  });\n  const [editMode, setEditMode] = useState(false);\n  const [editedBook, setEditedBook] = useState(null);\n\n  // State for new review\n  const [newReview, setNewReview] = useState({\n    user: {\n      id: null // Replace with the actual user ID from authentication\n    },\n    book: {\n      id: id // Set the book ID to the current page's book ID\n    },\n    rating: 0,\n    text: \"\",\n    date: \"16-01-2024\",\n    // You can update the date format as needed\n    comments: []\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      s;\n      try {\n        // Fetch individual book details based on the ID\n        const bookResponse = await fetch(`http://localhost:8080/book/${id}`);\n        const bookData = await bookResponse.json();\n        setBook(bookData);\n\n        // Update the book ID in newReview when the book data is available\n        setNewReview(prevReview => ({\n          ...prevReview,\n          book: {\n            id: bookData.id\n          }\n        }));\n\n        // Fetch reviews for the individual book\n        const reviewsResponse = await fetch(`http://localhost:8080/review/book/${id}`);\n        const reviewsData = await reviewsResponse.json();\n        setReviews(reviewsData);\n\n        // Fetch comments for each review and update the state\n        const commentsPromises = reviewsData.map(async review => {\n          const commentsResponse = await fetch(`http://localhost:8080/comment/review/${review.id}`);\n          const commentsData = await commentsResponse.json();\n          return {\n            reviewId: review.id,\n            comments: commentsData\n          };\n        });\n        const commentsData = await Promise.all(commentsPromises);\n        const commentsObject = commentsData.reduce((acc, {\n          reviewId,\n          comments\n        }) => {\n          acc[reviewId] = comments;\n          return acc;\n        }, {});\n        setComments(commentsObject);\n      } catch (error) {\n        console.error(`Error fetching book ${id} details:`, error);\n      }\n\n      // Fetch user data\n      try {\n        const userDataResponse = await axios.get(`http://localhost:8080/user/findByUsername/${localStorage.getItem('username')}`);\n        setUserData(userDataResponse.data);\n        setUserDataReady(true); // Indicate that user data is ready\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n      setLoadingReviews(false);\n    };\n    fetchData();\n  }, [id]);\n  useEffect(() => {\n    if (userDataReady && newReview.user.id === null) {\n      setNewReview(prevReview => ({\n        ...prevReview,\n        user: {\n          id: userData.id\n        }\n      }));\n    }\n  }, [userDataReady, newReview, userData]);\n  const handleReviewSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Set the current date\n      const currentDate = new Date();\n      const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      const formattedDate = currentDate.toLocaleDateString('en-GB', options);\n\n      // Update the newReview object with the current date\n      setNewReview(prevReview => ({\n        ...prevReview,\n        date: formattedDate\n      }));\n\n      // Send the new review to the server using Axios\n      await axios.post('http://localhost:8080/review/add', newReview, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Refetch reviews from the server after submitting a new review\n      const updatedReviewsResponse = await fetch(`http://localhost:8080/review/book/${id}`);\n      const updatedReviewsData = await updatedReviewsResponse.json();\n      setReviews(updatedReviewsData);\n      const lastAddedReview = updatedReviewsData[updatedReviewsData.length - 1];\n      const updatedCommentsResponse = await fetch(`http://localhost:8080/comment/review/${lastAddedReview.id}`);\n      const updatedCommentsData = await updatedCommentsResponse.json();\n\n      // Update comments state by adding comments for the last added review\n      setComments(prevComments => ({\n        ...prevComments,\n        [lastAddedReview.id]: updatedCommentsData\n      }));\n\n      // Clear the new review form\n      setNewReview({\n        user: {\n          id: userData.id\n        },\n        book: {\n          id: id\n        },\n        rating: 0,\n        text: \"\",\n        date: formattedDate,\n        // Set the date to the current date\n        comments: []\n      });\n    } catch (error) {\n      console.error('Error submitting review:', error);\n      // Handle error as needed\n    }\n  };\n  const handleDeleteBook = () => {\n    if (isAdmin) {\n      axios.delete('http://localhost:8080/book/deleteByTitle', {\n        data: {\n          title: book.title\n        },\n        // Pass the bookId as data for the DELETE request\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        console.log('Book deleted successfully:', response.data);\n        navigate('/book-list');\n        // You may want to navigate to a different page or update the UI as needed\n      }).catch(error => {\n        console.error('Error deleting book:', error);\n        // Handle the error, e.g., display an error message to the user\n      });\n    } else {\n      console.log('User does not have the required role for deletion.');\n      // Optionally, you can provide feedback to the user that they don't have the required role\n    }\n  };\n  const handleBackToBook = () => {\n    navigate('/book-list');\n  };\n  const isAdmin = (_userData$roles$some = userData === null || userData === void 0 ? void 0 : (_userData$roles = userData.roles) === null || _userData$roles === void 0 ? void 0 : _userData$roles.some(role => role.roleName === 'ADMIN')) !== null && _userData$roles$some !== void 0 ? _userData$roles$some : false;\n  const isLoggedIn = userData !== null && userData !== void 0 ? userData : false;\n  if (!book || loadingReviews) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 12\n    }, this);\n  }\n  const handleCommentSubmit = async reviewId => {\n    try {\n      const currentDate = new Date();\n      const formattedDate = currentDate.toLocaleDateString('en-GB', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      });\n      const commentData = {\n        user: {\n          id: userData.id\n        },\n        review: {\n          id: reviewId\n        },\n        text: newComment.text,\n        date: formattedDate\n      };\n\n      // Make a POST request to add the comment\n      await axios.post('http://localhost:8080/comment/add', commentData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Refetch comments for the selected review\n      const updatedCommentsResponse = await fetch(`http://localhost:8080/comment/review/${reviewId}`);\n      const updatedCommentsData = await updatedCommentsResponse.json();\n      setComments(prevComments => ({\n        ...prevComments,\n        [reviewId]: updatedCommentsData\n      }));\n\n      // Clear the new comment form\n      setNewComment({\n        text: ''\n      });\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n      // Handle error as needed\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: '400px',\n      marginRight: '200px',\n      backgroundColor: ''\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginRight: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: book.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", book.authors.map(author => `${author.firstName} ${author.lastName}`).join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }, this), book.publisher && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Publisher: \", book.publisher.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Genres: \", book.genres.map(genre => genre.name).join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'justify',\n          lineHeight: '1.5',\n          fontSize: '16px',\n          color: '#333'\n        },\n        children: [\"Description: \", book.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Reviews:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), Array.isArray(reviews) && reviews.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No reviews available for this book.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(1, 1fr)',\n        gap: '16px',\n        marginRight: 300\n      },\n      children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '16px',\n          borderRadius: '8px',\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            position: 'relative',\n            top: '-10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginRight: '30px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"User: \", review.user.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Date: \", review.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rating: \", review.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: review.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedReviewId(selectedReviewId === review.id ? null : review.id),\n          children: selectedReviewId === review.id ? 'Hide Comments' : 'Show Comments'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this), selectedReviewId === review.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Comments:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Array.isArray(comments[review.id]) && comments[review.id].length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No comments available for this review.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 23\n            }, this) : comments[review.id].map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [comment.text, \" - \", comment.date, \" by \", comment.user.username]\n            }, comment.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              handleCommentSubmit(review.id);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Add a Comment:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              rows: \"3\",\n              cols: \"40\",\n              value: newComment.text,\n              onChange: e => setNewComment({\n                text: e.target.value\n              }),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 17\n        }, this)]\n      }, review.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '',\n        marginRight: '',\n        backgroundColor: '',\n        position: 'absolute',\n        top: 150,\n        left: 1240\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add a Review:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleReviewSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginRight: '10px'\n          },\n          children: \"Rating:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            marginLeft: '10px'\n          },\n          type: \"number\",\n          min: \"0\",\n          max: \"10\",\n          step: \"0.1\",\n          value: newReview.rating,\n          onChange: e => setNewReview({\n            ...newReview,\n            rating: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Review:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"5\",\n          cols: \"40\",\n          value: newReview.text,\n          onChange: e => setNewReview({\n            ...newReview,\n            text: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: {\n            position: 'absolute',\n            left: 250\n          },\n          children: \"Submit Review\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        bookId: book.id,\n        on: true,\n        onClick: handleDeleteBook,\n        style: {\n          position: 'absolute',\n          top: 100,\n          left: 1500\n        },\n        children: \"Delete Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditMode(true),\n        style: {\n          position: 'absolute',\n          top: 100,\n          left: 1400\n        },\n        children: \"Edit Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBackToBook,\n      style: {\n        position: 'absolute',\n        left: 30,\n        top: 100\n      },\n      children: \"Back to Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(IndividualBookPage, \"UKHk4KLxT0HedPdPjPqBT5dJi5s=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = IndividualBookPage;\nexport default IndividualBookPage;\nvar _c;\n$RefreshReg$(_c, \"IndividualBookPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","IndividualBookPage","_s","_userData$roles$some","_userData$roles","id","book","setBook","reviews","setReviews","loadingReviews","setLoadingReviews","userData","setUserData","navigate","userDataReady","setUserDataReady","comments","setComments","selectedReviewId","setSelectedReviewId","newComment","setNewComment","text","editMode","setEditMode","editedBook","setEditedBook","newReview","setNewReview","user","rating","date","fetchData","s","bookResponse","fetch","bookData","json","prevReview","reviewsResponse","reviewsData","commentsPromises","map","review","commentsResponse","commentsData","reviewId","Promise","all","commentsObject","reduce","acc","error","console","userDataResponse","get","localStorage","getItem","data","handleReviewSubmit","e","preventDefault","currentDate","Date","options","day","month","year","formattedDate","toLocaleDateString","post","headers","updatedReviewsResponse","updatedReviewsData","lastAddedReview","length","updatedCommentsResponse","updatedCommentsData","prevComments","handleDeleteBook","isAdmin","delete","title","then","response","log","catch","handleBackToBook","roles","some","role","roleName","isLoggedIn","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCommentSubmit","commentData","style","marginLeft","marginRight","backgroundColor","authors","author","firstName","lastName","join","publisher","name","genres","genre","textAlign","lineHeight","fontSize","color","description","Array","isArray","display","gridTemplateColumns","gap","border","padding","borderRadius","cursor","justifyContent","position","top","username","onClick","comment","onSubmit","rows","cols","value","onChange","target","required","type","left","min","max","step","bookId","on","_c","$RefreshReg$"],"sources":["C:/Users/Ionut/Desktop/React/bookreview/src/components/IndividualBookPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst IndividualBookPage = () => {\r\n  const { id } = useParams();\r\n  const [book, setBook] = useState(null);\r\n  const [reviews, setReviews] = useState([]);\r\n  const [loadingReviews, setLoadingReviews] = useState(true);\r\n  const [userData, setUserData] = useState(null);\r\n  const navigate = useNavigate();\r\n  const [userDataReady, setUserDataReady] = useState(false);\r\n  const [comments, setComments] = useState([]);\r\n  const [selectedReviewId, setSelectedReviewId] = useState(null);\r\n  const [newComment, setNewComment] = useState({\r\n    text: '',\r\n  });\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editedBook, setEditedBook] = useState(null);\r\n \r\n  // State for new review\r\n  const [newReview, setNewReview] = useState({\r\n    user: {\r\n      id: null, // Replace with the actual user ID from authentication\r\n    },\r\n    book: {\r\n      id: id, // Set the book ID to the current page's book ID\r\n    },\r\n    rating: 0,\r\n    text: \"\",\r\n    date: \"16-01-2024\", // You can update the date format as needed\r\n    comments: [],\r\n  });\r\n\r\n useEffect(() => {\r\n  const fetchData = async () => {s\r\n    try {\r\n      // Fetch individual book details based on the ID\r\n      const bookResponse = await fetch(`http://localhost:8080/book/${id}`);\r\n      const bookData = await bookResponse.json();\r\n      setBook(bookData);\r\n\r\n      // Update the book ID in newReview when the book data is available\r\n      setNewReview((prevReview) => ({\r\n        ...prevReview,\r\n        book: {\r\n          id: bookData.id,\r\n        },\r\n      }));\r\n\r\n      // Fetch reviews for the individual book\r\n      const reviewsResponse = await fetch(`http://localhost:8080/review/book/${id}`);\r\n      const reviewsData = await reviewsResponse.json();\r\n      setReviews(reviewsData);\r\n\r\n      // Fetch comments for each review and update the state\r\n      const commentsPromises = reviewsData.map(async (review) => {\r\n        const commentsResponse = await fetch(`http://localhost:8080/comment/review/${review.id}`);\r\n        const commentsData = await commentsResponse.json();\r\n        return { reviewId: review.id, comments: commentsData };\r\n      });\r\n\r\n      const commentsData = await Promise.all(commentsPromises);\r\n      const commentsObject = commentsData.reduce((acc, { reviewId, comments }) => {\r\n        acc[reviewId] = comments;\r\n        return acc;\r\n      }, {});\r\n\r\n      setComments(commentsObject);\r\n    } catch (error) {\r\n      console.error(`Error fetching book ${id} details:`, error);\r\n    }\r\n\r\n    // Fetch user data\r\n    try {\r\n      const userDataResponse = await axios.get(`http://localhost:8080/user/findByUsername/${localStorage.getItem('username')}`);\r\n      setUserData(userDataResponse.data);\r\n      setUserDataReady(true); // Indicate that user data is ready\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n    }\r\n\r\n    setLoadingReviews(false);\r\n  };\r\n\r\n  fetchData();\r\n}, [id]);\r\n\r\n\r\nuseEffect(() => {\r\n    if (userDataReady && newReview.user.id === null) {\r\n      setNewReview((prevReview) => ({\r\n        ...prevReview,\r\n        user: {\r\n          id: userData.id,\r\n        },\r\n      }));\r\n    }\r\n  }, [userDataReady, newReview, userData]);\r\n\r\n\r\n  \r\n\r\n  const handleReviewSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // Set the current date\r\n      const currentDate = new Date();\r\n      const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n      const formattedDate = currentDate.toLocaleDateString('en-GB', options);\r\n\r\n      // Update the newReview object with the current date\r\n      setNewReview((prevReview) => ({\r\n        ...prevReview,\r\n        date: formattedDate,\r\n      }));\r\n\r\n      // Send the new review to the server using Axios\r\n      await axios.post('http://localhost:8080/review/add', newReview, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      // Refetch reviews from the server after submitting a new review\r\n      const updatedReviewsResponse = await fetch(`http://localhost:8080/review/book/${id}`);\r\n      const updatedReviewsData = await updatedReviewsResponse.json();\r\n\r\n      setReviews(updatedReviewsData);\r\n\r\n      const lastAddedReview = updatedReviewsData[updatedReviewsData.length - 1];\r\n      const updatedCommentsResponse = await fetch(`http://localhost:8080/comment/review/${lastAddedReview.id}`);\r\n      const updatedCommentsData = await updatedCommentsResponse.json();\r\n\r\n      // Update comments state by adding comments for the last added review\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [lastAddedReview.id]: updatedCommentsData,\r\n      }));\r\n\r\n      // Clear the new review form\r\n      setNewReview({\r\n        user: {\r\n          id: userData.id,\r\n        },\r\n        book: {\r\n          id: id,\r\n        },\r\n        rating: 0,\r\n        text: \"\",\r\n        date: formattedDate, // Set the date to the current date\r\n        comments:[],\r\n      });\r\n    \r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n  \r\n\r\n  const handleDeleteBook = () => {\r\n  if (isAdmin) {\r\n\r\n    axios.delete('http://localhost:8080/book/deleteByTitle', {\r\n      data: { title : book.title }, // Pass the bookId as data for the DELETE request\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(response => {\r\n        console.log('Book deleted successfully:', response.data);\r\n        navigate('/book-list');\r\n        // You may want to navigate to a different page or update the UI as needed\r\n      })\r\n      .catch(error => {\r\n        console.error('Error deleting book:', error);\r\n        // Handle the error, e.g., display an error message to the user\r\n      });\r\n  } else {\r\n    console.log('User does not have the required role for deletion.');\r\n    // Optionally, you can provide feedback to the user that they don't have the required role\r\n  }\r\n};\r\n\r\nconst handleBackToBook = () => {\r\n  navigate('/book-list');\r\n}  \r\n\r\n  const isAdmin = userData?.roles?.some(role => role.roleName === 'ADMIN') ?? false;\r\n  const isLoggedIn = userData ?? false;\r\n\r\n  if (!book || loadingReviews) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n   const handleCommentSubmit = async (reviewId) => {\r\n    try {\r\n      const currentDate = new Date();\r\n      const formattedDate = currentDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });\r\n\r\n      const commentData = {\r\n        user: {\r\n          id: userData.id,\r\n        },\r\n        review: {\r\n          id: reviewId,\r\n        },\r\n        text: newComment.text,\r\n        date: formattedDate,\r\n      };\r\n\r\n      // Make a POST request to add the comment\r\n      await axios.post('http://localhost:8080/comment/add', commentData, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      // Refetch comments for the selected review\r\n      const updatedCommentsResponse = await fetch(`http://localhost:8080/comment/review/${reviewId}`);\r\n      const updatedCommentsData = await updatedCommentsResponse.json();\r\n\r\n      setComments(prevComments => ({\r\n        ...prevComments,\r\n        [reviewId]: updatedCommentsData,\r\n      }));\r\n\r\n      // Clear the new comment form\r\n      setNewComment({\r\n        text: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error submitting comment:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginLeft :'400px',marginRight :'200px',backgroundColor:'' }}>\r\n      <div style={{marginRight:300}}>\r\n      <h2>{book.title}</h2>\r\n      <p>Author: {book.authors.map(author => `${author.firstName} ${author.lastName}`).join(', ')}</p>\r\n      {book.publisher && (\r\n        <p>Publisher: {book.publisher.name}</p>\r\n      )}\r\n      <p>Genres: {book.genres.map(genre => genre.name).join(', ')}</p>\r\n      <p style={{ textAlign: 'justify', lineHeight: '1.5', fontSize: '16px', color: '#333' }}>Description: {book.description}</p>\r\n      </div>\r\n      <h3>Reviews:</h3>\r\n      {Array.isArray(reviews) && reviews.length === 0 ? (\r\n        <p>No reviews available for this book.</p>\r\n      ) : (\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, 1fr)', gap: '16px', marginRight:300}}>\r\n          {reviews.map(review => (\r\n            <div key={review.id}style={{ border: '1px solid #ccc', padding: '16px', borderRadius: '8px', cursor: 'pointer' }}>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between',position:'relative', top:'-10px' }}>\r\n                <div style={{ marginRight: '30px' }}>\r\n                  <p>User: {review.user.username}</p>\r\n                </div>\r\n              <div>\r\n                <p>Date: {review.date}</p>\r\n              </div>\r\n              </div>\r\n              <p>Rating: {review.rating}</p>\r\n              <p>{review.text}</p>\r\n              {//<p>Date: {review.date}</p>\r\n              }\r\n             {/* Dropdown to toggle comments visibility */}\r\n              <button onClick={() => setSelectedReviewId(selectedReviewId === review.id ? null : review.id)}>\r\n                {selectedReviewId === review.id ? 'Hide Comments' : 'Show Comments'}\r\n              </button>\r\n\r\n              {/* Display comments for the review if it's selected */}\r\n              {selectedReviewId === review.id && (\r\n                <div>\r\n                  <h4>Comments:</h4>\r\n                  <ul>\r\n                    {Array.isArray(comments[review.id]) && comments[review.id].length === 0 ? (\r\n                      <li>No comments available for this review.</li>\r\n                    ) : (\r\n                      comments[review.id].map(comment => (\r\n                        <li key={comment.id}>\r\n                          {comment.text} - {comment.date} by {comment.user.username}\r\n                        </li>\r\n                      ))\r\n                    )}\r\n                  </ul>\r\n                   {/* Form for adding a new comment */}\r\n                  <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    handleCommentSubmit(review.id);\r\n                  }}>\r\n                    <label>Add a Comment:</label>\r\n                    <br />\r\n                    <textarea\r\n                      rows=\"3\"\r\n                      cols=\"40\"\r\n                      value={newComment.text}\r\n                      onChange={(e) => setNewComment({ text: e.target.value })}\r\n                      required\r\n                    />\r\n                    <br />\r\n                    <button type=\"submit\">Submit Comment</button>\r\n                  </form>\r\n               </div>\r\n              )}\r\n            </div>\r\n              \r\n          ))}\r\n          \r\n        </div>\r\n      )}\r\n\r\n      \r\n      {isLoggedIn && (\r\n      <div style={{ marginLeft :'',marginRight :'',backgroundColor:'',position: 'absolute', top: 150, left: 1240 }}>\r\n      {/* Form for adding a new review */}\r\n      \r\n      <h3>Add a Review:</h3>\r\n      <form onSubmit={handleReviewSubmit}>\r\n        <label style={{ marginRight :'10px'}}>Rating:</label>\r\n        <input style={{ marginLeft :'10px'}}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          max=\"10\"\r\n          step=\"0.1\"\r\n          value={newReview.rating}\r\n          onChange={(e) => setNewReview({ ...newReview, rating: e.target.value })}\r\n          required\r\n        />\r\n        <br />\r\n    \r\n        <br ></br>\r\n        <label >Review:</label>\r\n        <br></br>\r\n        <br></br>\r\n        <textarea rows= \"5\" cols = \"40\"\r\n          value={newReview.text}\r\n          onChange={(e) => setNewReview({ ...newReview, text: e.target.value })}\r\n          required\r\n        />\r\n        <br></br>\r\n        <br />\r\n        <button type=\"submit\" style = {{ position :'absolute', left : 250}}>Submit Review</button>\r\n      </form>\r\n      </div>\r\n      )}\r\n\r\n      {isAdmin && (\r\n        <div>\r\n        <button bookId={book.id} on onClick={handleDeleteBook} \r\n        style={{ position: 'absolute', top: 100, left: 1500 }}\r\n        >Delete Book</button>\r\n        \r\n        <button onClick={() => setEditMode(true)} style={{ position: 'absolute', top: 100, left: 1400 }}>\r\n        Edit Book\r\n        </button>\r\n        </div>\r\n      )}\r\n\r\n      \r\n      <br />\r\n      <button onClick={handleBackToBook}\r\n      style = {{position : 'absolute', left : 30, top:100}}>Back to Books</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualBookPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}