{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ionut\\\\Desktop\\\\React\\\\bookreview\\\\src\\\\components\\\\IndividualBookPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualBookPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [book, setBook] = useState(null);\n  const [reviews, setReviews] = useState([]);\n  const [loadingReviews, setLoadingReviews] = useState(true);\n\n  // State for new review\n  const [newReview, setNewReview] = useState({\n    user: {\n      id: null // Replace with the actual user ID from authentication\n    },\n    book: {\n      id: id // Set the book ID to the current page's book ID\n    },\n    rating: 0,\n    text: \"\",\n    date: \"\" // You can update the date format as needed\n  });\n  useEffect(() => {\n    // Fetch individual book details based on the ID\n    fetch(`http://localhost:8080/book/${id}`).then(response => response.json()).then(data => {\n      setBook(data);\n      // Update the book ID in newReview when the book data is available\n      setNewReview(prevReview => ({\n        ...prevReview,\n        book: {\n          id: data.id\n        }\n      }));\n    }).catch(error => console.error(`Error fetching book ${id} details:`, error));\n\n    // Fetch reviews for the individual book using the updated endpoint\n    fetch(`http://localhost:8080/review/book/${id}`).then(response => response.json()).then(data => setReviews(data)).catch(error => console.error(`Error fetching reviews for book ${id}:`, error)).finally(() => setLoadingReviews(false));\n  }, [id]);\n  const handleReviewSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Send the new review to the server\n      const response = await fetch(`http://localhost:8080/review/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newReview)\n      });\n\n      // Handle the response as needed\n      // ...\n\n      // Refresh the reviews after submitting a new one\n      const updatedReviews = await response.json();\n      setReviews(updatedReviews);\n\n      // Clear the new review form\n      setNewReview({\n        user: {\n          id: null // Replace with the actual user ID from authentication\n        },\n        book: {\n          id: id // Set the book ID to the current page's book ID\n        },\n        rating: 0,\n        text: \"\",\n        date: \"\" // You can update the date format as needed\n      });\n    } catch (error) {\n      console.error('Error submitting review:', error);\n      // Handle error as needed\n    }\n  };\n  if (!book || loadingReviews) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Author: \", book.authors.map(author => `${author.firstName} ${author.lastName}`).join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), book.publisher && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Publisher: \", book.publisher.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Reviews:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), reviews.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No reviews available for this book.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User: \", review.user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rating: \", review.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: review.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", review.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)]\n      }, review.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a Review:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleReviewSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Rating:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: newReview.rating,\n        onChange: e => setNewReview({\n          ...newReview,\n          rating: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Review:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newReview.text,\n        onChange: e => setNewReview({\n          ...newReview,\n          text: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(IndividualBookPage, \"Z3Irw6GRukDR9+OcdsW0OkZ7xYA=\", false, function () {\n  return [useParams];\n});\n_c = IndividualBookPage;\nexport default IndividualBookPage;\nvar _c;\n$RefreshReg$(_c, \"IndividualBookPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","IndividualBookPage","_s","id","book","setBook","reviews","setReviews","loadingReviews","setLoadingReviews","newReview","setNewReview","user","rating","text","date","fetch","then","response","json","data","prevReview","catch","error","console","finally","handleReviewSubmit","e","preventDefault","method","headers","body","JSON","stringify","updatedReviews","children","fileName","_jsxFileName","lineNumber","columnNumber","title","authors","map","author","firstName","lastName","join","publisher","name","length","review","username","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Ionut/Desktop/React/bookreview/src/components/IndividualBookPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst IndividualBookPage = () => {\r\n  const { id } = useParams();\r\n  const [book, setBook] = useState(null);\r\n  const [reviews, setReviews] = useState([]);\r\n  const [loadingReviews, setLoadingReviews] = useState(true);\r\n\r\n  // State for new review\r\n  const [newReview, setNewReview] = useState({\r\n    user: {\r\n      id: null, // Replace with the actual user ID from authentication\r\n    },\r\n    book: {\r\n      id: id, // Set the book ID to the current page's book ID\r\n    },\r\n    rating: 0,\r\n    text: \"\",\r\n    date: \"\", // You can update the date format as needed\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch individual book details based on the ID\r\n    fetch(`http://localhost:8080/book/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setBook(data);\r\n        // Update the book ID in newReview when the book data is available\r\n        setNewReview(prevReview => ({\r\n          ...prevReview,\r\n          book: {\r\n            id: data.id,\r\n          },\r\n        }));\r\n      })\r\n      .catch(error => console.error(`Error fetching book ${id} details:`, error));\r\n\r\n    // Fetch reviews for the individual book using the updated endpoint\r\n    fetch(`http://localhost:8080/review/book/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => setReviews(data))\r\n      .catch(error => console.error(`Error fetching reviews for book ${id}:`, error))\r\n      .finally(() => setLoadingReviews(false));\r\n  }, [id]);\r\n\r\n  const handleReviewSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // Send the new review to the server\r\n      const response = await fetch(`http://localhost:8080/review/add`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newReview),\r\n      });\r\n\r\n      // Handle the response as needed\r\n      // ...\r\n\r\n      // Refresh the reviews after submitting a new one\r\n      const updatedReviews = await response.json();\r\n      setReviews(updatedReviews);\r\n\r\n      // Clear the new review form\r\n      setNewReview({\r\n        user: {\r\n          id: null, // Replace with the actual user ID from authentication\r\n        },\r\n        book: {\r\n          id: id, // Set the book ID to the current page's book ID\r\n        },\r\n        rating: 0,\r\n        text: \"\",\r\n        date: \"\", // You can update the date format as needed\r\n      });\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  if (!book || loadingReviews) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{book.title}</h2>\r\n      <p>Author: {book.authors.map(author => `${author.firstName} ${author.lastName}`).join(', ')}</p>\r\n      {book.publisher && (\r\n        <p>Publisher: {book.publisher.name}</p>\r\n      )}\r\n\r\n      <h3>Reviews:</h3>\r\n      {reviews.length === 0 ? (\r\n        <p>No reviews available for this book.</p>\r\n      ) : (\r\n        <ul>\r\n          {reviews.map(review => (\r\n            <li key={review.id}>\r\n              <p>User: {review.user.username}</p>\r\n              <p>Rating: {review.rating}</p>\r\n              <p>{review.text}</p>\r\n              <p>Date: {review.date}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* Form for adding a new review */}\r\n      <h3>Add a Review:</h3>\r\n      <form onSubmit={handleReviewSubmit}>\r\n        {/* Remove the user input field as it's handled with the stored username */}\r\n        {/* <label>User:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={newReview.user.id}\r\n          onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\r\n          required\r\n        /> */}\r\n\r\n        <label>Rating:</label>\r\n        <input\r\n          type=\"number\"\r\n          value={newReview.rating}\r\n          onChange={(e) => setNewReview({ ...newReview, rating: e.target.value })}\r\n          required\r\n        />\r\n\r\n        <label>Review:</label>\r\n        <textarea\r\n          value={newReview.text}\r\n          onChange={(e) => setNewReview({ ...newReview, text: e.target.value })}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\">Submit Review</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualBookPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}